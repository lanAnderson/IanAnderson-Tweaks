import net.darkhax.curseforgegradle.TaskPublishCurseForge

buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'net.darkhax.curseforgegradle' version '1.1.16'
    id 'org.jetbrains.kotlin.jvm' version '1.9.20'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.20'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group
version = mod_version

base{
    archivesName = mod_id + "-forge-" + minecraft_version
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
    quiet
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "CurseMaven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name = "KliKli Dev Repsy Maven"
        url = "https://repo.repsy.io/mvn/klikli-dev/mods"
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    maven {
        url = "https://jitpack.io"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    /Cobblemon/
//    compileOnly fg.deobf("curse.maven:cobblemon-687131:${cobblemon_forge_file_id}")
//    compileOnly fg.deobf("curse.maven:architectury-api-419699:${architectury_forge_file_id}")
    implementation fg.deobf("curse.maven:cobblemon-687131:${cobblemon_forge_file_id}")
    implementation fg.deobf("curse.maven:architectury-api-419699:${architectury_forge_file_id}")

    /Kotlin for Forge/
    implementation "thedarkcolour:kotlinforforge:${kotlin_for_forge_version}"

    /Plasmo Voice/
    compileOnly fg.deobf("curse.maven:plasmo-voice-467028:${plasmo_voice_forge_file_id}")
//    implementation fg.deobf("curse.maven:plasmo-voice-467028:${plasmo_voice_forge_file_id}")

    /Pehkui/
    implementation fg.deobf("com.github.Virtuoel:Pehkui:${pehkui_version}")

    /Raised/
    compileOnly fg.deobf("curse.maven:raised-570368:${raised_forge_file_id}")
//    implementation fg.deobf("curse.maven:raised-570368:${raised_forge_file_id}")

    /Modonomicon/
    compileOnly fg.deobf("com.klikli_dev:modonomicon:${modonomicon_mc_version}-${modonomicon_version}")
    runtimeOnly fg.deobf("com.klikli_dev:modonomicon:${modonomicon_mc_version}-${modonomicon_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title": "iantweaks",
                "Specification-Vendor": "IanAnderson",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": "IanAnderson",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_author, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_author,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

String changelogText = projectDir.toPath().resolve("CHANGELOG.md").getText('UTF-8')

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    int firstHeading = changelogText.indexOf("## [")
    int nextHeading = changelogText.indexOf("## [", firstHeading + 1)
    String recentChangelogText = changelogText.substring(firstHeading, nextHeading)

    debugMode = false
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(curseforge_forge_id, jar)
    mainFile.changelogType = "markdown"
    mainFile.changelog = recentChangelogText
    mainFile.releaseType = "release"

    mainFile.addGameVersion("Forge")
    mainFile.addGameVersion("Java 17")

    mainFile.addRequirement("plasmo-voice")
}